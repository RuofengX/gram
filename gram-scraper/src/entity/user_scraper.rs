//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::types::FrozenSession;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_scraper")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub updated_at: DateTimeWithTimeZone,
    pub api_config: Uuid,
    pub account: Uuid,
    #[sea_orm(column_type = "JsonBinary")]
    pub frozen_session: FrozenSession,
    pub in_use: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::global_api_config::Entity",
        from = "Column::ApiConfig",
        to = "super::global_api_config::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GlobalApiConfig,
    #[sea_orm(has_many = "super::peer_file_part::Entity")]
    PeerFilePart,
    #[sea_orm(has_many = "super::peer_media::Entity")]
    PeerMedia,
    #[sea_orm(
        belongs_to = "super::user_account::Entity",
        from = "Column::Account",
        to = "super::user_account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserAccount,
    #[sea_orm(has_many = "super::user_chat::Entity")]
    UserChat,
}

impl Related<super::global_api_config::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GlobalApiConfig.def()
    }
}

impl Related<super::peer_file_part::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PeerFilePart.def()
    }
}

impl Related<super::peer_media::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PeerMedia.def()
    }
}

impl Related<super::user_account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAccount.def()
    }
}

impl Related<super::user_chat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserChat.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
