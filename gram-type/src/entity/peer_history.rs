//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use crate::Message;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "peer_history")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub updated_at: DateTimeWithTimeZone,
    pub user_chat: Uuid,
    pub history_id: i32,
    #[sea_orm(column_type = "JsonBinary")]
    pub message: Message,
    pub chat_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user_chat::Entity",
        from = "Column::UserChat",
        to = "super::user_chat::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserChat,
}

impl Related<super::user_chat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserChat.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
