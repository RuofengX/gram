//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "peer_file_part")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub updated_at: DateTimeWithTimeZone,
    pub user_scraper: Uuid,
    pub media: Uuid,
    pub part_offset: i64,
    pub part_len: i64,
    pub is_last_part: bool,
    pub next_part: Option<Uuid>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub data: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::NextPart",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::peer_media::Entity",
        from = "Column::Media",
        to = "super::peer_media::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PeerMedia,
    #[sea_orm(
        belongs_to = "super::user_scraper::Entity",
        from = "Column::UserScraper",
        to = "super::user_scraper::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserScraper,
}

impl Related<super::peer_media::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PeerMedia.def()
    }
}

impl Related<super::user_scraper::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserScraper.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
